How did viewing a diff between two versions of a file help you see the bug that
was introduced?

    It was helped identify quickly what changed, and focus on that 

How could having easy access to the entire history of a file make you a more
efficient programmer in the long term?

    Because you can always compare versions and see what you changed over time, and the effect it caused. Additionally, you can easily revert to an old version if something goes wrong, as it is always available

What do you think are the pros and cons of manually choosing when to create a
commit, like you do in Git, vs having versions automatically saved, like Google
docs does?

    A pro is that you commit only when you think you have changed enough to consider this a different version, and thus you donâ€™t have an endless number of versions.
A possible con is that you can make successive changes before you commit, and some of the changes will not be documented anywhere (if you revert them before commit) 

Why do you think some version control systems, like Git, allow saving multiple
files in one commit, while others, like Google Docs, treat each file separately?

    Because files in the former are usually connected (e.g. one file uses another one) and the focus us more on coding applications, whether the latter have a different focus, and the files are not so interconnected   

How can you use the commands git log and git diff to view the history of files?

    With log you can see the comments, and see what change each commit introduced, with diff you can compare versions and see what you changed

How might using version control make you more confident to make changes that
could break something?

    Because if something breaks, the previous version is always available, and we can revert to it

Now that you have your workspace set up, what do you want to try using Git for?

    keeping versions of the files I develop for various courses, and eventually create an online portfolio, which I will be able to show to others
